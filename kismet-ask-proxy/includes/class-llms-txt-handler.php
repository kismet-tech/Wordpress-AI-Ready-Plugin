<?php
/**
 * Handles llms.txt functionality for AI/LLM policy disclosure
 * - URL rewrite rules for /llms.txt (root level, like robots.txt)
 * - Surfaces AI policies and MCP server information
 * - Follows emerging convention for AI crawler discovery
 * - Settings integration for policy configuration
 */

if (!defined('ABSPATH')) {
    exit;
}

class Kismet_LLMS_Txt_Handler {
    
    public function __construct() {
        // Set up URL routing and request handling
        add_action('init', array($this, 'add_llms_txt_rewrite'));
        add_filter('query_vars', array($this, 'add_query_vars'));
        
        // Direct request interceptor (alternative to rewrite)
        add_action('parse_request', array($this, 'handle_llms_txt_request'));
        
        // Template redirect hook as fallback
        add_action('template_redirect', array($this, 'maybe_serve_llms_txt'));
    }
    
    /**
     * Add rewrite rule for llms.txt
     */
    public function add_llms_txt_rewrite() {
        add_rewrite_rule('^llms\.txt$', 'index.php?kismet_llms_txt=1', 'top');
    }
    
    /**
     * Add query variables
     */
    public function add_query_vars($vars) {
        $vars[] = 'kismet_llms_txt';
        return $vars;
    }
    
    /**
     * Handle direct llms.txt requests (before WordPress routing)
     */
    public function handle_llms_txt_request($wp) {
        if (isset($wp->request) && $wp->request === 'llms.txt') {
            $this->serve_llms_txt();
            exit;
        }
    }
    
    /**
     * Template redirect fallback handler
     */
    public function maybe_serve_llms_txt() {
        if (get_query_var('kismet_llms_txt')) {
            $this->serve_llms_txt();
            exit;
        }
    }
    
    /**
     * Generate and serve the llms.txt content
     */
    private function serve_llms_txt() {
        // Set appropriate headers
        header('Content-Type: text/plain; charset=utf-8');
        header('Cache-Control: public, max-age=3600'); // Cache for 1 hour
        http_response_code(200);
        
        // Generate llms.txt content
        $content = $this->generate_llms_txt_content();
        
        echo $content;
        
        // Log the request for debugging
        error_log('Kismet: Served llms.txt content (' . strlen($content) . ' bytes)');
    }
    
    /**
     * Generate the actual llms.txt content
     */
    private function generate_llms_txt_content() {
        $site_url = get_site_url();
        $site_name = get_bloginfo('name');
        $admin_email = get_option('admin_email');
        $current_date = date('Y-m-d');
        
        $content = "# llms.txt - AI/LLM Policy and MCP Server Discovery\n";
        $content .= "# Generated by Kismet WordPress Plugin on {$current_date}\n";
        $content .= "# Site: {$site_name} ({$site_url})\n\n";
        
        // MCP Server Discovery (primary purpose)
        $content .= "# MCP (Model Context Protocol) Server Discovery\n";
        $content .= "MCP-SERVER: https://mcp.ksmt.app/sse\n\n";
        
        // AI/LLM Policies
        $content .= "# AI/LLM Usage Policies\n";
        $content .= "# This site provides structured data for AI assistants\n\n";
        
        // Contact and legal information
        $content .= "# Contact Information\n";
        $content .= "Contact: {$admin_email}\n";
        $content .= "Website: {$site_url}\n\n";
        
        // Available AI endpoints
        $content .= "# Available AI Endpoints\n";
        $content .= "AI-Plugin: {$site_url}/.well-known/ai-plugin.json\n";
        $content .= "MCP-Servers: {$site_url}/.well-known/mcp/servers.json\n";
        $content .= "API-Endpoint: {$site_url}/ask\n\n";
        
        // Usage guidelines
        $content .= "# Usage Guidelines\n";
        $content .= "# This site welcomes responsible AI access\n";
        $content .= "# Please respect rate limits and terms of service\n";
        $content .= "# For bulk access, contact the site administrator\n\n";
        
        // Legal and privacy
        if ($this->has_privacy_policy()) {
            $content .= "Privacy-Policy: {$site_url}/privacy-policy\n";
        }
        
        if ($this->has_terms_of_service()) {
            $content .= "Terms-Of-Service: {$site_url}/terms-of-service\n";
        }
        
        $content .= "\n# Last updated: {$current_date}\n";
        
        return $content;
    }
    
    /**
     * Check if site has a privacy policy page
     */
    private function has_privacy_policy() {
        $privacy_page = get_option('wp_page_for_privacy_policy');
        return !empty($privacy_page) && get_post_status($privacy_page) === 'publish';
    }
    
    /**
     * Check if site has terms of service page
     */
    private function has_terms_of_service() {
        // Check for common terms page slugs
        $terms_page = get_page_by_path('terms-of-service');
        if (!$terms_page) {
            $terms_page = get_page_by_path('terms');
        }
        if (!$terms_page) {
            $terms_page = get_page_by_path('terms-and-conditions');
        }
        
        return $terms_page && get_post_status($terms_page) === 'publish';
    }
    
    /**
     * Flush rewrite rules (called during plugin activation)
     */
    public function flush_rewrite_rules() {
        $this->add_llms_txt_rewrite();
        flush_rewrite_rules();
    }
    
    /**
     * Get the current llms.txt content for testing/preview
     */
    public function get_content_preview() {
        return $this->generate_llms_txt_content();
    }
    
    /**
     * Test if llms.txt is accessible
     */
    public function test_accessibility() {
        $site_url = get_site_url();
        $llms_url = $site_url . '/llms.txt';
        
        $response = wp_remote_get($llms_url, array(
            'timeout' => 5,
            'sslverify' => true
        ));
        
        return array(
            'url' => $llms_url,
            'accessible' => !is_wp_error($response),
            'response_code' => is_wp_error($response) ? null : wp_remote_retrieve_response_code($response),
            'content_type' => is_wp_error($response) ? null : wp_remote_retrieve_header($response, 'content-type'),
            'error' => is_wp_error($response) ? $response->get_error_message() : null
        );
    }
} 