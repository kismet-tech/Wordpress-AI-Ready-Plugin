<?php
/**
 * Plugin Name: Kismet Ask Proxy
 * Description: Creates an AI-ready /ask page that serves both API requests and human visitors with Kismet branding.
 * Version: 1.0
 * Author: Kismet
 * License: GPL2+
 */

// Prevent direct access
if (!defined('ABSPATH')) {
    exit;
}

// Define plugin constants
define('KISMET_PLUGIN_PATH', plugin_dir_path(__FILE__));
define('KISMET_PLUGIN_URL', plugin_dir_url(__FILE__));

// Include our modular handler classes
require_once KISMET_PLUGIN_PATH . 'includes/class-robots-handler.php';
require_once KISMET_PLUGIN_PATH . 'includes/class-ai-plugin-handler.php';
require_once KISMET_PLUGIN_PATH . 'includes/class-ask-handler.php';

/**
 * Main plugin class - coordinates all handlers
 */
class Kismet_Ask_Proxy_Plugin {
    
    private $robots_handler;
    private $ai_plugin_handler;
    private $ask_handler;
    
    public function __construct() {
        // Initialize all our handler classes
        $this->robots_handler = new Kismet_Robots_Handler();
        $this->ai_plugin_handler = new Kismet_AI_Plugin_Handler();
        $this->ask_handler = new Kismet_Ask_Handler();
    
        // Add a "Settings" link to the plugin row
        add_filter('plugin_action_links_' . plugin_basename(__FILE__), array($this, 'add_settings_link'));
    }
    
    /**
     * Add "Settings" link to plugin actions in the plugins list
     */
    public function add_settings_link($links) {
        $settings_link = '<a href="options-general.php?page=kismet-ai-plugin-settings">Settings</a>';
        array_unshift($links, $settings_link);
        return $links;
    }
}

// Initialize the plugin
new Kismet_Ask_Proxy_Plugin();

// === ACTIVATION & DEACTIVATION HOOKS ===

/**
 * Plugin activation hook
 */
register_activation_hook(__FILE__, function() {
    error_log('Kismet Ask Proxy Plugin Activated');
    
    // Create physical .well-known directory and file to bypass web server blocking
    kismet_create_physical_ai_plugin_file();
        
    // Flush rewrite rules for ai-plugin.json
    $ai_plugin_handler = new Kismet_AI_Plugin_Handler();
    $ai_plugin_handler->flush_rewrite_rules();
    
    // Force a hard flush after a delay to ensure rules are properly registered
    wp_schedule_single_event(time() + 5, 'kismet_delayed_flush');
    
    // Send registration notification to Kismet backend
    kismet_register_plugin_activation();
});

/**
 * Delayed rewrite rules flush to ensure proper registration
 */
add_action('kismet_delayed_flush', function() {
    flush_rewrite_rules(true); // true = hard flush, clears .htaccess
    error_log('Kismet: Performed delayed rewrite rules flush');
});

/**
 * Plugin deactivation hook  
 */
register_deactivation_hook(__FILE__, function() {
    error_log('Kismet Ask Proxy Plugin Deactivated');
    
    // Remove physical .well-known file
    kismet_remove_physical_ai_plugin_file();
    
    flush_rewrite_rules();
});

// === PHYSICAL FILE CREATION FUNCTIONALITY ===

/**
 * Create physical .well-known/ai-plugin.json file to bypass web server blocking
 */
function kismet_create_physical_ai_plugin_file() {
    $wordpress_root = ABSPATH;
    $well_known_dir = $wordpress_root . '.well-known';
    $ai_plugin_php_file = $well_known_dir . '/ai-plugin-handler.php';
    $htaccess_file = $well_known_dir . '/.htaccess';
    
    error_log("KISMET DEBUG: Creating physical files in: $well_known_dir");
    
    // Create .well-known directory if it doesn't exist
    if (!file_exists($well_known_dir)) {
        if (wp_mkdir_p($well_known_dir)) {
            error_log("KISMET DEBUG: Created .well-known directory");
        } else {
            error_log("KISMET ERROR: Failed to create .well-known directory");
            return false;
        }
    }
    
    // Create the PHP handler file
    $php_content = '<?php
/**
 * Kismet AI Plugin JSON Handler - Generated by Kismet Ask Proxy Plugin
 * This file provides the ai-plugin.json content by calling WordPress functions
 */

// Load WordPress
require_once(__DIR__ . "/../wp-load.php");

// Get the AI plugin handler and generate JSON
if (class_exists("Kismet_AI_Plugin_Handler")) {
    $handler = new Kismet_AI_Plugin_Handler();
    
    // Use reflection to call private method
    $reflection = new ReflectionClass($handler);
    $method = $reflection->getMethod("serve_generated_ai_plugin");
    $method->setAccessible(true);
    $method->invoke($handler);
} else {
    // Fallback basic JSON if plugin not loaded
    header("Content-Type: application/json");
    http_response_code(200);
    echo json_encode([
        "schema_version" => "v1",
        "name_for_human" => "WordPress AI Assistant",
        "name_for_model" => "wordpress_assistant", 
        "description_for_human" => "AI assistant for this WordPress site",
        "description_for_model" => "Provides information about this WordPress website",
        "auth" => ["type" => "none"],
        "api" => ["type" => "openapi", "url" => "' . get_site_url() . '/ask"],
        "logo_url" => "' . get_site_url() . '/wp-content/uploads/2024/kismet-logo.png",
        "contact_email" => "' . get_option('admin_email') . '",
        "legal_info_url" => "' . get_site_url() . '/privacy-policy"
    ], JSON_PRETTY_PRINT);
}
?>';
    
    // Create .htaccess rule to rewrite ai-plugin.json to our PHP handler
    $htaccess_content = '# Kismet AI Plugin - Rewrite ai-plugin.json to PHP handler
RewriteEngine On
RewriteRule ^ai-plugin\.json$ ai-plugin-handler.php [L]
';
    
    // Write the PHP file
    $php_success = file_put_contents($ai_plugin_php_file, $php_content);
    $htaccess_success = file_put_contents($htaccess_file, $htaccess_content);
    
    if ($php_success && $htaccess_success) {
        error_log("KISMET DEBUG: Successfully created ai-plugin PHP handler and .htaccess");
        return true;
    } else {
        error_log("KISMET ERROR: Failed to write files - PHP: " . ($php_success ? 'OK' : 'FAIL') . ", .htaccess: " . ($htaccess_success ? 'OK' : 'FAIL'));
        return false;
    }
}

/**
 * Remove physical .well-known/ai-plugin.json file on deactivation
 */
function kismet_remove_physical_ai_plugin_file() {
    $wordpress_root = ABSPATH;
    $well_known_dir = $wordpress_root . '.well-known';
    $ai_plugin_php_file = $well_known_dir . '/ai-plugin-handler.php';
    $htaccess_file = $well_known_dir . '/.htaccess';
    
    // Remove PHP handler file
    if (file_exists($ai_plugin_php_file)) {
        if (unlink($ai_plugin_php_file)) {
            error_log("KISMET DEBUG: Removed ai-plugin-handler.php file");
        } else {
            error_log("KISMET ERROR: Failed to remove ai-plugin-handler.php file");
        }
    }
    
    // Remove .htaccess file
    if (file_exists($htaccess_file)) {
        if (unlink($htaccess_file)) {
            error_log("KISMET DEBUG: Removed .well-known/.htaccess file");
        } else {
            error_log("KISMET ERROR: Failed to remove .htaccess file");
        }
    }
    
    // Try to remove .well-known directory if empty
    if (file_exists($well_known_dir) && count(scandir($well_known_dir)) == 2) { // only . and ..
        rmdir($well_known_dir);
        error_log("KISMET DEBUG: Removed empty .well-known directory");
    }
}

// === BACKEND REGISTRATION FUNCTIONALITY ===

/**
 * Send plugin activation notification to Kismet backend
 */
function kismet_register_plugin_activation() {
    $site_url = get_site_url();
    
    // Determine the correct API endpoint based on environment
    // Check if we're in a local development environment
    $host = $_SERVER['HTTP_HOST'] ?? '';
    $is_local = (strpos($host, 'localhost') !== false || 
                 strpos($host, '127.0.0.1') !== false || 
                 strpos($host, '.local') !== false);
    
    // Determine backend API endpoint based on WordPress site environment
    // If WordPress site is running locally (localhost/127.0.0.1/.local), 
    // send plugin activation notifications to local backend on port 4000
    // Otherwise, send to production API at api.makekismet.com
    $api_base = $is_local ? 'https://localhost:4000' : 'https://api.makekismet.com';
    $endpoint = $api_base . '/PluginInstallation/AddPluginInstallation';
    
    $data = array(
        'siteUrl' => $site_url
    );
    
    // Send the notification
    $args = array(
        'body' => json_encode($data),
        'headers' => array(
            'Content-Type' => 'application/json',
        ),
        'timeout' => 15,
        'sslverify' => !$is_local // Disable SSL verification for local development
    );
    
    $response = wp_remote_post($endpoint, $args);
    
    if (is_wp_error($response)) {
        error_log('Kismet Plugin Installation Tracking Error: ' . $response->get_error_message());
    } else {
        $response_code = wp_remote_retrieve_response_code($response);
        $response_body = wp_remote_retrieve_body($response);
        
        if ($response_code === 201 || $response_code === 200) {
            error_log('Kismet Plugin Installation: Successfully tracked');
        } else {
            error_log('Kismet Plugin Installation Tracking Error: HTTP ' . $response_code . ' - ' . $response_body);
        }
    }
}