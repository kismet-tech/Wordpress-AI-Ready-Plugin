<?php
/**
 * Kismet AI Ready Plugin
 *
 * This plugin now uses a CLEAN ARCHITECTURE:
 * - Installers: Run ONCE during activation/deactivation (ALL database operations)
 * - Handlers: Serve requests with ZERO database operations (static files)
 * - NO init hooks anywhere = NO 20+ database operations per page load
 */

/**
 * Plugin Name: Kismet AI Ready Plugin
 * Description: Creates an AI-ready /ask page that serves both API requests and human visitors with Kismet branding.
 * Version: 1.0
 * Author: Kismet
 * License: GPL2+
 */

// Prevent direct access
if (!defined('ABSPATH')) {
    exit;
}

// Define plugin constants
define('KISMET_PLUGIN_PATH', plugin_dir_path(__FILE__));
define('KISMET_PLUGIN_URL', plugin_dir_url(__FILE__));

// Include required classes
require_once KISMET_PLUGIN_PATH . 'includes/installers/class-ai-plugin-installer.php';
require_once KISMET_PLUGIN_PATH . 'includes/endpoint-content-logic/class-mcp-servers-content-logic.php';
require_once KISMET_PLUGIN_PATH . 'includes/endpoint-content-logic/class-robots-content-logic.php';
require_once KISMET_PLUGIN_PATH . 'includes/endpoint-content-logic/class-llms-content-logic.php';
require_once KISMET_PLUGIN_PATH . 'includes/endpoint-content-logic/class-ask-content-logic.php';
require_once KISMET_PLUGIN_PATH . 'includes/shared/class-file-safety-manager.php';
require_once KISMET_PLUGIN_PATH . 'includes/shared/class-route-tester.php';
require_once KISMET_PLUGIN_PATH . 'includes/shared/class-endpoint-manager.php';
require_once KISMET_PLUGIN_PATH . 'includes/strategies/strategies.php';
require_once KISMET_PLUGIN_PATH . 'includes/strategies/class-ai-plugin-strategies.php';
require_once KISMET_PLUGIN_PATH . 'includes/strategies/class-mcp-servers-strategies.php';
require_once KISMET_PLUGIN_PATH . 'includes/strategies/class-robots-strategies.php';
require_once KISMET_PLUGIN_PATH . 'includes/strategies/class-ask-strategies.php';
require_once KISMET_PLUGIN_PATH . 'includes/installers/class-strategy-coordinator.php';
require_once KISMET_PLUGIN_PATH . 'includes/admin/class-ai-plugin-admin.php';
require_once KISMET_PLUGIN_PATH . 'includes/admin/class-endpoint-status-dashboard.php';
require_once KISMET_PLUGIN_PATH . 'includes/plugin-page-notice/class-endpoint-status-notice.php';
require_once KISMET_PLUGIN_PATH . 'includes/environment/class-endpoint-tester.php';
require_once KISMET_PLUGIN_PATH . 'includes/environment/class-server-detector.php';

/**
 * Main plugin class - Clean Architecture
 * 
 * Only /ask endpoint needs a handler - all other endpoints are static files
 * generated by installers during activation.
 * NO init hooks = NO database operations per page load.
 */
class Kismet_Ask_Proxy_Plugin {
    
    private $ai_plugin_admin;
    private $endpoint_manager;
    private $endpoint_status_notice;
    private $server_detector;
    
    public function __construct() {
        // Initialize server detector
        $this->server_detector = new Kismet_Server_Detector();
        $this->server_detector->detect_server_environment();
        
        // Initialize endpoint manager for intelligent endpoint handling
        $this->endpoint_manager = Kismet_Endpoint_Manager::get_instance();
        
        // Initialize admin interface (only loads in admin context)
        $this->ai_plugin_admin = new Kismet_AI_Plugin_Admin();
        
        // Initialize endpoint status notice (shows across admin pages)
        $this->endpoint_status_notice = new Kismet_Endpoint_Status_Notice();
    
        // Let endpoint manager handle all query vars and redirects
        add_filter('query_vars', array($this->endpoint_manager, 'add_query_vars'));
        add_action('template_redirect', array($this->endpoint_manager, 'handle_template_redirect'));
        
        // Add a "Settings" link to the plugin row
        add_filter('plugin_action_links_' . plugin_basename(__FILE__), array($this, 'add_settings_link'));
    }
    
    /**
     * Add "Settings" link to plugin actions in the plugins list
     */
    public function add_settings_link($links) {
        $settings_link = '<a href="options-general.php?page=kismet-ai-plugin-settings">Settings</a>';
        array_unshift($links, $settings_link);
        return $links;
    }
    
    /**
     * Get server detector instance
     * 
     * @return Kismet_Server_Detector Server detection instance
     */
    public function get_server_detector() {
        return $this->server_detector;
    }
    
    /**
     * Legacy method for backward compatibility
     * @deprecated Use get_server_detector() instead
     */
    public function detect_server_type() {
        // Legacy method - delegate to server detector
        if (!$this->server_detector) {
            $this->server_detector = new Kismet_Server_Detector();
            $this->server_detector->detect_server_environment();
        }
    }


    
    /**
     * Get endpoint-specific strategy manager for a given endpoint
     * 
     * Returns the appropriate strategy class that understands the unique requirements
     * and optimal server configurations for each specific endpoint.
     * 
     * @param string $endpoint_path The endpoint path (e.g., '/.well-known/ai-plugin.json')
     * @return object|null Strategy manager instance or null if endpoint not recognized
     */
    public function get_endpoint_strategy_manager($endpoint_path) {
        switch ($endpoint_path) {
            case '/.well-known/ai-plugin.json':
                return new Kismet_AI_Plugin_Strategies($this);
                
            case '/.well-known/mcp/servers.json':
                return new Kismet_MCP_Servers_Strategies($this);
                
            case '/robots.txt':
                return new Kismet_Robots_Strategies($this);
                
            case '/ask':
                return new Kismet_Ask_Strategies($this);
                
            default:
                error_log("KISMET STRATEGY: No strategy manager found for endpoint: {$endpoint_path}");
                return null;
        }
    }
    
    /**
     * Get ordered list of strategies for a specific endpoint
     * 
     * This method delegates to the endpoint-specific strategy manager.
     * Each endpoint type has its own class that understands server requirements.
     * 
     * @param string $endpoint_path The endpoint path
     * @return array Ordered array of strategies to try, from most preferred to fallback
     */
    public function get_endpoint_strategies($endpoint_path) {
        $strategy_manager = $this->get_endpoint_strategy_manager($endpoint_path);
        
        if ($strategy_manager && method_exists($strategy_manager, 'get_ordered_strategies')) {
            return $strategy_manager->get_ordered_strategies();
        }
        
        // Fallback for unrecognized endpoints
        error_log("KISMET STRATEGY: Using fallback strategies for unknown endpoint: {$endpoint_path}");
        return ['wordpress_rewrite', 'manual_static_file'];
    }
    
    /**
     * Execute strategies in order until one succeeds
     * 
     * This is the main method installers should use. It tries each strategy
     * for the endpoint in the optimal order based on server capabilities.
     * 
     * @param string $endpoint_path The endpoint path (e.g., '/.well-known/ai-plugin.json')
     * @param array $endpoint_data Data needed to create the endpoint (content, etc.)
     * @param callable $strategy_executor Function that attempts each strategy
     * @return array Result with success status and details
     */
    public function execute_endpoint_strategies($endpoint_path, $endpoint_data, $strategy_executor) {
        $strategies = $this->get_endpoint_strategies($endpoint_path);
        $results = array();
        
        error_log("KISMET STRATEGY: Trying strategies for {$endpoint_path}: " . implode(', ', $strategies));
        
        foreach ($strategies as $strategy) {
            error_log("KISMET STRATEGY: Attempting strategy: {$strategy}");
            
            try {
                // Call the provided strategy executor function
                $result = call_user_func($strategy_executor, $strategy, $endpoint_path, $endpoint_data, $this);
                
                if ($result && isset($result['success']) && $result['success']) {
                    error_log("KISMET STRATEGY: Strategy {$strategy} succeeded for {$endpoint_path}");
                    return array(
                        'success' => true,
                        'strategy_used' => $strategy,
                        'details' => $result,
                        'attempted_strategies' => array_keys($results),
                        'server_info' => $this->get_server_info()
                    );
                } else {
                    $error_msg = isset($result['error']) ? $result['error'] : 'Strategy failed without specific error';
                    error_log("KISMET STRATEGY: Strategy {$strategy} failed: {$error_msg}");
                    $results[$strategy] = $result;
                }
                
            } catch (Exception $e) {
                error_log("KISMET STRATEGY: Strategy {$strategy} threw exception: " . $e->getMessage());
                $results[$strategy] = array(
                    'success' => false,
                    'error' => $e->getMessage()
                );
            }
        }
        
        // All strategies failed
        error_log("KISMET STRATEGY: All strategies failed for {$endpoint_path}");
        return array(
            'success' => false,
            'error' => 'All endpoint strategies failed',
            'attempted_strategies' => $results,
            'server_info' => $this->get_server_info(),
            'recommendations' => $this->get_failure_recommendations($endpoint_path)
        );
    }
    
    /**
     * Get recommendations when all strategies fail
     * 
     * @param string $endpoint_path The endpoint that failed
     * @return array Recommendations for manual configuration
     */
    private function get_failure_recommendations($endpoint_path) {
        $recommendations = array();
        
        if ($this->server_detector->is_nginx) {
            $recommendations[] = 'Add nginx configuration to serve static files from WordPress root';
            $recommendations[] = 'Ensure nginx has read permissions to WordPress directory';
        } elseif ($this->server_detector->is_apache || $this->server_detector->is_litespeed) {
            $recommendations[] = 'Check if .htaccess files are enabled (AllowOverride directive)';
            $recommendations[] = 'Verify WordPress root directory is writable';
        } elseif ($this->server_detector->is_iis) {
            $recommendations[] = 'Check IIS URL Rewrite module installation';
            $recommendations[] = 'Verify web.config file permissions';
        }
        
        $recommendations[] = 'Ensure WordPress permalinks are enabled';
        $recommendations[] = 'Check server error logs for specific issues';
        
        return $recommendations;
    }
    

    
    /**
     * Get single recommended strategy (for backward compatibility)
     * 
     * @param string $endpoint_path The endpoint path
     * @return string Single recommended strategy
     * @deprecated Use get_endpoint_strategies() instead for better fallback handling
     */
    public function get_recommended_strategy($endpoint_path) {
        $strategies = $this->get_endpoint_strategies($endpoint_path);
        return $strategies[0]; // Return the most preferred strategy
    }
    
    /**
     * Get human-readable server information
     * 
     * @return array Server information for display in admin interface
     */
    public function get_server_info() {
        return $this->server_detector->get_server_info();
    }
    
    /**
     * Get simple server type name for logging
     * 
     * @return string Simple server type name
     */
    public function get_server_type_name() {
        return $this->server_detector->get_server_type_name();
    }
}

// Initialize the plugin
error_log('KISMET PLUGIN: About to initialize main plugin class');
global $kismet_ask_proxy_plugin;
$kismet_ask_proxy_plugin = new Kismet_Ask_Proxy_Plugin();
error_log('KISMET PLUGIN: Main plugin class initialized successfully');

// Check plugin activation status
$plugin_file = plugin_basename(__FILE__);
$is_active = is_plugin_active($plugin_file);
error_log('KISMET PLUGIN: Plugin activation status - ' . ($is_active ? 'ACTIVE' : 'INACTIVE') . ' for file: ' . $plugin_file);

// Manual activation trigger for debugging
if (isset($_GET['kismet_force_activate']) && $_GET['kismet_force_activate'] === 'true') {
    error_log('KISMET PLUGIN: Manual activation triggered via URL parameter');
    kismet_manual_activation();
}

// Add admin notices for environment compatibility
add_action('admin_notices', 'kismet_display_environment_notices');

/**
 * Display environment compatibility notices in admin
 */
function kismet_display_environment_notices() {
    // Check for activation warning
    $activation_warning = get_option('kismet_activation_warning');
    if ($activation_warning) {
        echo '<div class="notice notice-warning is-dismissible">';
        echo '<p><strong>Kismet Plugin:</strong> ' . esc_html($activation_warning) . '</p>';
        echo '<p><a href="' . esc_url(admin_url('options-general.php?page=kismet-ai-plugin-settings')) . '">View compatibility report</a></p>';
        echo '</div>';
        // Clear the warning after showing it once
        delete_option('kismet_activation_warning');
    }
    
    // Environment report removed - using simplified server detection now
}

// === ACTIVATION & DEACTIVATION HOOKS ===

/**
 * Plugin activation hook - ALL database operations happen HERE
 */
register_activation_hook(__FILE__, function() {
    error_log('KISMET ACTIVATION: Starting plugin activation');
    
    try {
        // Simple compatibility check
        if (version_compare(PHP_VERSION, '7.4.0', '<')) {
            error_log('KISMET ACTIVATION WARNING: PHP version ' . PHP_VERSION . ' is below recommended 7.4.0');
            add_option('kismet_activation_warning', 'PHP version ' . PHP_VERSION . ' is below recommended 7.4.0');
        }
        
        // Run ALL content logic activations
        Kismet_AI_Plugin_Installer::activate();
        Kismet_MCP_Servers_Content_Logic::activate();
        Kismet_Robots_Content_Logic::activate();
        Kismet_LLMS_Content_Logic::activate();
        Kismet_Ask_Content_Logic::activate();
        
        // Flush rewrite rules ONCE
        flush_rewrite_rules();
        
        error_log('KISMET ACTIVATION: Plugin activation completed successfully');
        
        // Send registration notification to Kismet backend
        kismet_register_plugin_activation();
        
    } catch (Exception $e) {
        error_log('KISMET ACTIVATION ERROR: ' . $e->getMessage());
        add_option('kismet_activation_warning', 'Activation errors occurred: ' . $e->getMessage());
    }
});

/**
 * Plugin deactivation hook
 */
register_deactivation_hook(__FILE__, function() {
    try {
        // Run ALL deactivation cleanups
        Kismet_AI_Plugin_Installer::deactivate();
        Kismet_MCP_Servers_Content_Logic::deactivate();
        Kismet_Robots_Content_Logic::deactivate();
        Kismet_LLMS_Content_Logic::deactivate();
        
        // Deactivate /ask endpoint through Strategy Coordinator
        global $kismet_ask_proxy_plugin;
        if ($kismet_ask_proxy_plugin) {
            $strategy_coordinator = new Kismet_Strategy_Coordinator($kismet_ask_proxy_plugin);
            $cleanup_result = $strategy_coordinator->cleanup_endpoint_by_type('/ask', 'ask');
            error_log('KISMET DEACTIVATION: /ask endpoint cleanup result: ' . print_r($cleanup_result, true));
        }
        
        // Flush rewrite rules
        flush_rewrite_rules();
        
    } catch (Exception $e) {
        error_log('KISMET DEACTIVATION ERROR: ' . $e->getMessage());
    }
});

/**
 * Plugin uninstall hook - complete cleanup
 */
register_uninstall_hook(__FILE__, 'kismet_plugin_uninstall');

/**
 * Manual activation function for debugging
 */
function kismet_manual_activation() {
    error_log('KISMET MANUAL ACTIVATION: Starting manual activation');
    
    try {
        // Simple compatibility check
        if (version_compare(PHP_VERSION, '7.4.0', '<')) {
            add_option('kismet_activation_warning', 'PHP version ' . PHP_VERSION . ' is below recommended 7.4.0');
        }
        
        // Run ALL content logic activations
        Kismet_AI_Plugin_Installer::activate();
        Kismet_MCP_Servers_Content_Logic::activate();
        Kismet_Robots_Content_Logic::activate();
        Kismet_LLMS_Content_Logic::activate();
        Kismet_Ask_Content_Logic::activate();
        
        // Flush rewrite rules ONCE
        flush_rewrite_rules();
        
        error_log('KISMET MANUAL ACTIVATION: Manual activation completed successfully');
        
        // Send registration notification to Kismet backend
        kismet_register_plugin_activation();
        
    } catch (Exception $e) {
        error_log('KISMET MANUAL ACTIVATION ERROR: ' . $e->getMessage());
        error_log('KISMET MANUAL ACTIVATION ERROR: Stack trace: ' . $e->getTraceAsString());
        add_option('kismet_activation_warning', 'Manual activation errors occurred: ' . $e->getMessage());
    }
}

/**
 * Named function for plugin uninstall - WordPress requires named functions for uninstall hooks
 */
function kismet_plugin_uninstall() {
    // Complete database cleanup
    Kismet_Ask_Content_Logic::uninstall();
    Kismet_Robots_Content_Logic::uninstall();
    
    // Remove all options  
    delete_option('kismet_activation_warning');
}

/**
 * Send registration notification to Kismet backend
 */
function kismet_register_plugin_activation() {
    // Simple notification without blocking activation
    wp_remote_post('https://api.kismethotel.com/plugin-activation', array(
        'timeout' => 5,
        'blocking' => false,
        'body' => array(
            'domain' => get_site_url(),
            'plugin_version' => '1.0',
            'wp_version' => get_bloginfo('version'),
            'activation_time' => current_time('c')
        )
    ));
}